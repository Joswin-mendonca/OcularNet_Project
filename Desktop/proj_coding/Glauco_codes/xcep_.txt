import os
import time
import torch
from torch.utils.data import DataLoader
from torchvision import datasets, transforms
import torch.nn as nn
import torch.optim as optim
from sklearn.metrics import accuracy_score
import timm  # <-- Use timm for Xception

# Device config
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
print(device)

# Paths
train_dir = 'datasets/train'
val_dir = 'datasets/val'

# Transforms (Xception expects 299x299 like Inception)
train_transform = transforms.Compose([
    transforms.Resize((256, 256)),
    transforms.RandomResizedCrop(224),
    transforms.RandomHorizontalFlip(),
    transforms.RandomRotation(15),
    transforms.ToTensor(),
    transforms.Normalize([0.5, 0.5, 0.5],
                         [0.5, 0.5, 0.5])
])

val_transform = transforms.Compose([
    transforms.Resize((256, 256)),
    transforms.CenterCrop(224),
    transforms.ToTensor(),
    transforms.Normalize([0.5, 0.5, 0.5],
                         [0.5, 0.5, 0.5])
])

def main():
    # Load datasets
    train_dataset = datasets.ImageFolder(train_dir, transform=train_transform)
    val_dataset = datasets.ImageFolder(val_dir, transform=val_transform)

    # Dataloaders
    train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True, num_workers=0)
    val_loader = DataLoader(val_dataset, batch_size=32, shuffle=False, num_workers=0)

    # Model: Use Xception from timm
    model = timm.create_model('xception', pretrained=True, num_classes=len(train_dataset.classes))
    model = model.to(device)

    # Training tools
    criterion = nn.CrossEntropyLoss()
    optimizer = optim.Adam(model.parameters(), lr=1e-4)
    scheduler = optim.lr_scheduler.StepLR(optimizer, step_size=5, gamma=0.1)

    # Training loop
    num_epochs = 10
    start_time = time.time()

    for epoch in range(num_epochs):
        epoch_start = time.time()

        model.train()
        train_loss = 0.0
        for images, labels in train_loader:
            images, labels = images.to(device), labels.to(device)

            optimizer.zero_grad()
            outputs = model(images)
            loss = criterion(outputs, labels)
            loss.backward()
            optimizer.step()
            train_loss += loss.item()

        scheduler.step()

        # Validation
        model.eval()
        val_preds, val_labels = [], []
        with torch.no_grad():
            for images, labels in val_loader:
                images, labels = images.to(device), labels.to(device)
                outputs = model(images)
                _, preds = torch.max(outputs, 1)
                val_preds.extend(preds.cpu().numpy())
                val_labels.extend(labels.cpu().numpy())

        acc = accuracy_score(val_labels, val_preds)
        epoch_duration = time.time() - epoch_start

        print(f"Epoch [{epoch+1}/{num_epochs}] | "
              f"Train Loss: {train_loss/len(train_loader):.4f} | "
              f"Val Acc: {acc:.4f} | "
              f"Time: {epoch_duration:.2f} sec")

    # Total time
    total_time = time.time() - start_time
    print(f"\nâœ… Training complete in {total_time:.2f} seconds ({total_time/60:.2f} minutes)")
    print(f"\nFinal Validation Accuracy: {acc:.4f}")


# Required for Windows multiprocessing
if __name__ == '__main__':
    main()
